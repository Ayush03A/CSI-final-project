# -*- coding: utf-8 -*-
"""Data_Customers.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r94p_IteWCChp1sMvx345vsIbiee-ru2
"""

pip install Faker

import csv
import random
from faker import Faker
from datetime import datetime, timedelta

OUTPUT_FILE = 'customers_source.csv'
NUMBER_OF_ROWS = 650  # Set the desired number of rows (more than 600)

fake = Faker()

# Define the header for our CSV file
headers = [
    'CustomerID',
    'FirstName',
    'LastName',
    'Email',
    'RegistrationDate',
    'LastModifiedDate'
]

# Data Generation Function
def generate_customer_row(customer_id):
    """Generates a single, realistic row of customer data."""
    first_name = fake.first_name()
    last_name = fake.last_name()

    # Create a plausible email based on the name
    email = f"{first_name.lower()}.{last_name.lower()}{random.randint(1,99)}@{fake.free_email_domain()}"

    # Generate a registration date within the last two years
    registration_date = fake.date_between(start_date='-2y', end_date='today')

    # Generate a last modified date that is sometime after the registration date

    modification_delta = timedelta(days=random.randint(1, 365), hours=random.randint(1, 23))
    last_modified_date = registration_date + modification_delta

    return [
        customer_id,
        first_name,
        last_name,
        email,
        registration_date.strftime('%Y-%m-%d'),  # Format date as YYYY-MM-DD
        last_modified_date.strftime('%Y-%m-%dT%H:%M:%SZ') # Format datetime in ISO 8601 format
    ]


def main():
    """Main function to generate the CSV file."""
    print(f"Generating {NUMBER_OF_ROWS} customer records...")


    with open(OUTPUT_FILE, 'w', newline='', encoding='utf-8') as csvfile:
        # Create a csv writer object
        writer = csv.writer(csvfile)

        # Write the header row first
        writer.writerow(headers)

        # Loop to generate and write the specified number of rows
        for i in range(1, NUMBER_OF_ROWS + 1):
            writer.writerow(generate_customer_row(i))

    print(f"Successfully created '{OUTPUT_FILE}' with {NUMBER_OF_ROWS} rows.")


# Run the main function when the script is executed
if __name__ == "__main__":
    main()

